# -*- coding: utf-8 -*-


"""
Component GenerateCylinder

.. autofunction:: GenerateCylinder

Indices and tables
******************

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
"""

        
def GenerateCylinder(attachedTo , name='GenerateCylinder', printLog=0, tags=[], bbox=array([[ 1.79769313e+308,  1.79769313e+308,  1.79769313e+308],
       [-1.79769313e+308, -1.79769313e+308, -1.79769313e+308]]), componentState='Undefined', listening=0, output_TetrahedraPosition=array([[ 0.00000000e+00,  0.00000000e+00,  0.00000000e+00],
       [ 6.66666667e-02,  0.00000000e+00,  0.00000000e+00],
       [ 3.33333333e-02,  5.77350269e-02,  0.00000000e+00],
       [-3.33333333e-02,  5.77350269e-02,  0.00000000e+00],
       [-6.66666667e-02,  8.16431199e-18,  0.00000000e+00],
       [-3.33333333e-02, -5.77350269e-02,  0.00000000e+00],
       [ 3.33333333e-02, -5.77350269e-02,  0.00000000e+00],
       [ 1.33333333e-01,  0.00000000e+00,  0.00000000e+00],
       [ 6.66666667e-02,  1.15470054e-01,  0.00000000e+00],
       [-6.66666667e-02,  1.15470054e-01,  0.00000000e+00],
       [-1.33333333e-01,  1.63286240e-17,  0.00000000e+00],
       [-6.66666667e-02, -1.15470054e-01,  0.00000000e+00],
       [ 6.66666667e-02, -1.15470054e-01,  0.00000000e+00],
       [ 2.00000000e-01,  0.00000000e+00,  0.00000000e+00],
       [ 1.00000000e-01,  1.73205081e-01,  0.00000000e+00],
       [-1.00000000e-01,  1.73205081e-01,  0.00000000e+00],
       [-2.00000000e-01,  2.44929360e-17,  0.00000000e+00],
       [-1.00000000e-01, -1.73205081e-01,  0.00000000e+00],
       [ 1.00000000e-01, -1.73205081e-01,  0.00000000e+00],
       [ 0.00000000e+00,  0.00000000e+00,  2.50000000e-01],
       [ 6.66666667e-02,  0.00000000e+00,  2.50000000e-01],
       [ 3.33333333e-02,  5.77350269e-02,  2.50000000e-01],
       [-3.33333333e-02,  5.77350269e-02,  2.50000000e-01],
       [-6.66666667e-02,  8.16431199e-18,  2.50000000e-01],
       [-3.33333333e-02, -5.77350269e-02,  2.50000000e-01],
       [ 3.33333333e-02, -5.77350269e-02,  2.50000000e-01],
       [ 1.33333333e-01,  0.00000000e+00,  2.50000000e-01],
       [ 6.66666667e-02,  1.15470054e-01,  2.50000000e-01],
       [-6.66666667e-02,  1.15470054e-01,  2.50000000e-01],
       [-1.33333333e-01,  1.63286240e-17,  2.50000000e-01],
       [-6.66666667e-02, -1.15470054e-01,  2.50000000e-01],
       [ 6.66666667e-02, -1.15470054e-01,  2.50000000e-01],
       [ 2.00000000e-01,  0.00000000e+00,  2.50000000e-01],
       [ 1.00000000e-01,  1.73205081e-01,  2.50000000e-01],
       [-1.00000000e-01,  1.73205081e-01,  2.50000000e-01],
       [-2.00000000e-01,  2.44929360e-17,  2.50000000e-01],
       [-1.00000000e-01, -1.73205081e-01,  2.50000000e-01],
       [ 1.00000000e-01, -1.73205081e-01,  2.50000000e-01],
       [ 0.00000000e+00,  0.00000000e+00,  5.00000000e-01],
       [ 6.66666667e-02,  0.00000000e+00,  5.00000000e-01],
       [ 3.33333333e-02,  5.77350269e-02,  5.00000000e-01],
       [-3.33333333e-02,  5.77350269e-02,  5.00000000e-01],
       [-6.66666667e-02,  8.16431199e-18,  5.00000000e-01],
       [-3.33333333e-02, -5.77350269e-02,  5.00000000e-01],
       [ 3.33333333e-02, -5.77350269e-02,  5.00000000e-01],
       [ 1.33333333e-01,  0.00000000e+00,  5.00000000e-01],
       [ 6.66666667e-02,  1.15470054e-01,  5.00000000e-01],
       [-6.66666667e-02,  1.15470054e-01,  5.00000000e-01],
       [-1.33333333e-01,  1.63286240e-17,  5.00000000e-01],
       [-6.66666667e-02, -1.15470054e-01,  5.00000000e-01],
       [ 6.66666667e-02, -1.15470054e-01,  5.00000000e-01],
       [ 2.00000000e-01,  0.00000000e+00,  5.00000000e-01],
       [ 1.00000000e-01,  1.73205081e-01,  5.00000000e-01],
       [-1.00000000e-01,  1.73205081e-01,  5.00000000e-01],
       [-2.00000000e-01,  2.44929360e-17,  5.00000000e-01],
       [-1.00000000e-01, -1.73205081e-01,  5.00000000e-01],
       [ 1.00000000e-01, -1.73205081e-01,  5.00000000e-01],
       [ 0.00000000e+00,  0.00000000e+00,  7.50000000e-01],
       [ 6.66666667e-02,  0.00000000e+00,  7.50000000e-01],
       [ 3.33333333e-02,  5.77350269e-02,  7.50000000e-01],
       [-3.33333333e-02,  5.77350269e-02,  7.50000000e-01],
       [-6.66666667e-02,  8.16431199e-18,  7.50000000e-01],
       [-3.33333333e-02, -5.77350269e-02,  7.50000000e-01],
       [ 3.33333333e-02, -5.77350269e-02,  7.50000000e-01],
       [ 1.33333333e-01,  0.00000000e+00,  7.50000000e-01],
       [ 6.66666667e-02,  1.15470054e-01,  7.50000000e-01],
       [-6.66666667e-02,  1.15470054e-01,  7.50000000e-01],
       [-1.33333333e-01,  1.63286240e-17,  7.50000000e-01],
       [-6.66666667e-02, -1.15470054e-01,  7.50000000e-01],
       [ 6.66666667e-02, -1.15470054e-01,  7.50000000e-01],
       [ 2.00000000e-01,  0.00000000e+00,  7.50000000e-01],
       [ 1.00000000e-01,  1.73205081e-01,  7.50000000e-01],
       [-1.00000000e-01,  1.73205081e-01,  7.50000000e-01],
       [-2.00000000e-01,  2.44929360e-17,  7.50000000e-01],
       [-1.00000000e-01, -1.73205081e-01,  7.50000000e-01],
       [ 1.00000000e-01, -1.73205081e-01,  7.50000000e-01],
       [ 0.00000000e+00,  0.00000000e+00,  1.00000000e+00],
       [ 6.66666667e-02,  0.00000000e+00,  1.00000000e+00],
       [ 3.33333333e-02,  5.77350269e-02,  1.00000000e+00],
       [-3.33333333e-02,  5.77350269e-02,  1.00000000e+00],
       [-6.66666667e-02,  8.16431199e-18,  1.00000000e+00],
       [-3.33333333e-02, -5.77350269e-02,  1.00000000e+00],
       [ 3.33333333e-02, -5.77350269e-02,  1.00000000e+00],
       [ 1.33333333e-01,  0.00000000e+00,  1.00000000e+00],
       [ 6.66666667e-02,  1.15470054e-01,  1.00000000e+00],
       [-6.66666667e-02,  1.15470054e-01,  1.00000000e+00],
       [-1.33333333e-01,  1.63286240e-17,  1.00000000e+00],
       [-6.66666667e-02, -1.15470054e-01,  1.00000000e+00],
       [ 6.66666667e-02, -1.15470054e-01,  1.00000000e+00],
       [ 2.00000000e-01,  0.00000000e+00,  1.00000000e+00],
       [ 1.00000000e-01,  1.73205081e-01,  1.00000000e+00],
       [-1.00000000e-01,  1.73205081e-01,  1.00000000e+00],
       [-2.00000000e-01,  2.44929360e-17,  1.00000000e+00],
       [-1.00000000e-01, -1.73205081e-01,  1.00000000e+00],
       [ 1.00000000e-01, -1.73205081e-01,  1.00000000e+00]]), output_TrianglesPosition=array([[ 2.00000000e-01,  0.00000000e+00,  0.00000000e+00],
       [ 1.00000000e-01,  1.73205081e-01,  0.00000000e+00],
       [-1.00000000e-01,  1.73205081e-01,  0.00000000e+00],
       [-2.00000000e-01,  2.44929360e-17,  0.00000000e+00],
       [-1.00000000e-01, -1.73205081e-01,  0.00000000e+00],
       [ 1.00000000e-01, -1.73205081e-01,  0.00000000e+00],
       [ 2.00000000e-01,  0.00000000e+00,  2.50000000e-01],
       [ 1.00000000e-01,  1.73205081e-01,  2.50000000e-01],
       [-1.00000000e-01,  1.73205081e-01,  2.50000000e-01],
       [-2.00000000e-01,  2.44929360e-17,  2.50000000e-01],
       [-1.00000000e-01, -1.73205081e-01,  2.50000000e-01],
       [ 1.00000000e-01, -1.73205081e-01,  2.50000000e-01],
       [ 2.00000000e-01,  0.00000000e+00,  5.00000000e-01],
       [ 1.00000000e-01,  1.73205081e-01,  5.00000000e-01],
       [-1.00000000e-01,  1.73205081e-01,  5.00000000e-01],
       [-2.00000000e-01,  2.44929360e-17,  5.00000000e-01],
       [-1.00000000e-01, -1.73205081e-01,  5.00000000e-01],
       [ 1.00000000e-01, -1.73205081e-01,  5.00000000e-01],
       [ 2.00000000e-01,  0.00000000e+00,  7.50000000e-01],
       [ 1.00000000e-01,  1.73205081e-01,  7.50000000e-01],
       [-1.00000000e-01,  1.73205081e-01,  7.50000000e-01],
       [-2.00000000e-01,  2.44929360e-17,  7.50000000e-01],
       [-1.00000000e-01, -1.73205081e-01,  7.50000000e-01],
       [ 1.00000000e-01, -1.73205081e-01,  7.50000000e-01],
       [ 2.00000000e-01,  0.00000000e+00,  1.00000000e+00],
       [ 1.00000000e-01,  1.73205081e-01,  1.00000000e+00],
       [-1.00000000e-01,  1.73205081e-01,  1.00000000e+00],
       [-2.00000000e-01,  2.44929360e-17,  1.00000000e+00],
       [-1.00000000e-01, -1.73205081e-01,  1.00000000e+00],
       [ 1.00000000e-01, -1.73205081e-01,  1.00000000e+00]]), tetrahedra=array([[25, 19, 20,  0],
       [25, 20,  6,  0],
       [ 0,  6,  1, 20],
       ...,
       [88, 93, 74, 94],
       [74, 88, 94, 69],
       [75, 74, 94, 69]], dtype=int32), triangles=array([[ 6,  0,  1],
       [ 6,  1,  7],
       [ 7,  1,  2],
       [ 7,  2,  8],
       [ 8,  2,  3],
       [ 8,  3,  9],
       [ 9,  3,  4],
       [ 9,  4, 10],
       [10,  4,  5],
       [10,  5, 11],
       [11,  5,  0],
       [11,  0,  6],
       [12,  6,  7],
       [12,  7, 13],
       [13,  7,  8],
       [13,  8, 14],
       [14,  8,  9],
       [14,  9, 15],
       [15,  9, 10],
       [15, 10, 16],
       [16, 10, 11],
       [16, 11, 17],
       [17, 11,  6],
       [17,  6, 12],
       [18, 12, 13],
       [18, 13, 19],
       [19, 13, 14],
       [19, 14, 20],
       [20, 14, 15],
       [20, 15, 21],
       [21, 15, 16],
       [21, 16, 22],
       [22, 16, 17],
       [22, 17, 23],
       [23, 17, 12],
       [23, 12, 18],
       [24, 18, 19],
       [24, 19, 25],
       [25, 19, 20],
       [25, 20, 26],
       [26, 20, 21],
       [26, 21, 27],
       [27, 21, 22],
       [27, 22, 28],
       [28, 22, 23],
       [28, 23, 29],
       [29, 23, 18],
       [29, 18, 24]], dtype=int32), BezierTriangleWeights=array([], dtype=float64), isBezierTriangleRational=[], BezierTriangleDegree=0, BezierTetrahedronWeights=array([], dtype=float64), isBezierTetrahedronRational=[], BezierTetrahedronDegree=0, radius=0.2, height=1.0, origin=array([0., 0., 0.]), openSurface=1, resCircumferential=6, resRadial=3, resHeight=5, **kwargs):
    """Generate a Cylindrical Tetrahedral Mesh


    Args:

		 name: object name

		 printLog: if true, emits extra messages at runtime.

		 tags: list of the subsets the objet belongs to

		 bbox: this object bounding box

		 componentState: The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).

		 listening: if true, handle the events, otherwise ignore the events

		 output_TetrahedraPosition: output array of 3d points of tetrahedra mesh

		 output_TrianglesPosition: output array of 3d points of triangle mesh

		 tetrahedra: output mesh tetrahedra

		 triangles: output triangular mesh

		 BezierTriangleWeights: weights of rational Bezier triangles

		 isBezierTriangleRational: booleans indicating if each Bezier triangle is rational or integral

		 BezierTriangleDegree: order of Bezier triangles

		 BezierTetrahedronWeights: weights of rational Bezier tetrahedra

		 isBezierTetrahedronRational: booleans indicating if each Bezier tetrahedron is rational or integral

		 BezierTetrahedronDegree: order of Bezier tetrahedra

		 radius: input cylinder radius

		 height: input cylinder height

		 origin: cylinder origin point

		 openSurface: if the cylinder is open at its 2 ends

		 resCircumferential: Resolution in the circumferential direction

		 resRadial: Resolution in the radial direction

		 resHeight: Resolution in the height direction


    """
    return attachedTo.createObject("GenerateCylinder" , name=name, printLog=printLog, tags=tags, bbox=bbox, componentState=componentState, listening=listening, output_TetrahedraPosition=output_TetrahedraPosition, output_TrianglesPosition=output_TrianglesPosition, tetrahedra=tetrahedra, triangles=triangles, BezierTriangleWeights=BezierTriangleWeights, isBezierTriangleRational=isBezierTriangleRational, BezierTriangleDegree=BezierTriangleDegree, BezierTetrahedronWeights=BezierTetrahedronWeights, isBezierTetrahedronRational=isBezierTetrahedronRational, BezierTetrahedronDegree=BezierTetrahedronDegree, radius=radius, height=height, origin=origin, openSurface=openSurface, resCircumferential=resCircumferential, resRadial=resRadial, resHeight=resHeight, **kwargs)
