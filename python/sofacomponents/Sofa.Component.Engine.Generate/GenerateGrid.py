# -*- coding: utf-8 -*-


"""
Component GenerateGrid

.. autofunction:: GenerateGrid

Indices and tables
******************

* :ref:`genindex`
* :ref:`modindex`
* :ref:`search`
"""

        
def GenerateGrid(attachedTo , name='GenerateGrid', printLog=0, tags=[], bbox=array([[ 1.79769313e+308,  1.79769313e+308,  1.79769313e+308],
       [-1.79769313e+308, -1.79769313e+308, -1.79769313e+308]]), componentState='Undefined', listening=0, output_position=array([[0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.],
       [0., 0., 0.]]), tetrahedra=array([[ 0, 17,  1, 21],
       [ 0,  1,  4, 21],
       [ 1,  4, 21,  5],
       [21,  4,  0, 20],
       [21, 20,  0, 17],
       [20, 17, 16,  0],
       [16, 33, 17, 37],
       [16, 17, 20, 37],
       [17, 20, 37, 21],
       [37, 20, 16, 36],
       [37, 36, 16, 33],
       [36, 33, 32, 16],
       [32, 49, 33, 53],
       [32, 33, 36, 53],
       [33, 36, 53, 37],
       [53, 36, 32, 52],
       [53, 52, 32, 49],
       [52, 49, 48, 32],
       [ 4, 21,  5, 25],
       [ 4,  5,  8, 25],
       [ 5,  8, 25,  9],
       [25,  8,  4, 24],
       [25, 24,  4, 21],
       [24, 21, 20,  4],
       [20, 37, 21, 41],
       [20, 21, 24, 41],
       [21, 24, 41, 25],
       [41, 24, 20, 40],
       [41, 40, 20, 37],
       [40, 37, 36, 20],
       [36, 53, 37, 57],
       [36, 37, 40, 57],
       [37, 40, 57, 41],
       [57, 40, 36, 56],
       [57, 56, 36, 53],
       [56, 53, 52, 36],
       [ 8, 25,  9, 29],
       [ 8,  9, 12, 29],
       [ 9, 12, 29, 13],
       [29, 12,  8, 28],
       [29, 28,  8, 25],
       [28, 25, 24,  8],
       [24, 41, 25, 45],
       [24, 25, 28, 45],
       [25, 28, 45, 29],
       [45, 28, 24, 44],
       [45, 44, 24, 41],
       [44, 41, 40, 24],
       [40, 57, 41, 61],
       [40, 41, 44, 61],
       [41, 44, 61, 45],
       [61, 44, 40, 60],
       [61, 60, 40, 57],
       [60, 57, 56, 40],
       [ 1, 18,  2, 22],
       [ 1,  2,  5, 22],
       [ 2,  5, 22,  6],
       [22,  5,  1, 21],
       [22, 21,  1, 18],
       [21, 18, 17,  1],
       [17, 34, 18, 38],
       [17, 18, 21, 38],
       [18, 21, 38, 22],
       [38, 21, 17, 37],
       [38, 37, 17, 34],
       [37, 34, 33, 17],
       [33, 50, 34, 54],
       [33, 34, 37, 54],
       [34, 37, 54, 38],
       [54, 37, 33, 53],
       [54, 53, 33, 50],
       [53, 50, 49, 33],
       [ 5, 22,  6, 26],
       [ 5,  6,  9, 26],
       [ 6,  9, 26, 10],
       [26,  9,  5, 25],
       [26, 25,  5, 22],
       [25, 22, 21,  5],
       [21, 38, 22, 42],
       [21, 22, 25, 42],
       [22, 25, 42, 26],
       [42, 25, 21, 41],
       [42, 41, 21, 38],
       [41, 38, 37, 21],
       [37, 54, 38, 58],
       [37, 38, 41, 58],
       [38, 41, 58, 42],
       [58, 41, 37, 57],
       [58, 57, 37, 54],
       [57, 54, 53, 37],
       [ 9, 26, 10, 30],
       [ 9, 10, 13, 30],
       [10, 13, 30, 14],
       [30, 13,  9, 29],
       [30, 29,  9, 26],
       [29, 26, 25,  9],
       [25, 42, 26, 46],
       [25, 26, 29, 46],
       [26, 29, 46, 30],
       [46, 29, 25, 45],
       [46, 45, 25, 42],
       [45, 42, 41, 25],
       [41, 58, 42, 62],
       [41, 42, 45, 62],
       [42, 45, 62, 46],
       [62, 45, 41, 61],
       [62, 61, 41, 58],
       [61, 58, 57, 41],
       [ 2, 19,  3, 23],
       [ 2,  3,  6, 23],
       [ 3,  6, 23,  7],
       [23,  6,  2, 22],
       [23, 22,  2, 19],
       [22, 19, 18,  2],
       [18, 35, 19, 39],
       [18, 19, 22, 39],
       [19, 22, 39, 23],
       [39, 22, 18, 38],
       [39, 38, 18, 35],
       [38, 35, 34, 18],
       [34, 51, 35, 55],
       [34, 35, 38, 55],
       [35, 38, 55, 39],
       [55, 38, 34, 54],
       [55, 54, 34, 51],
       [54, 51, 50, 34],
       [ 6, 23,  7, 27],
       [ 6,  7, 10, 27],
       [ 7, 10, 27, 11],
       [27, 10,  6, 26],
       [27, 26,  6, 23],
       [26, 23, 22,  6],
       [22, 39, 23, 43],
       [22, 23, 26, 43],
       [23, 26, 43, 27],
       [43, 26, 22, 42],
       [43, 42, 22, 39],
       [42, 39, 38, 22],
       [38, 55, 39, 59],
       [38, 39, 42, 59],
       [39, 42, 59, 43],
       [59, 42, 38, 58],
       [59, 58, 38, 55],
       [58, 55, 54, 38],
       [10, 27, 11, 31],
       [10, 11, 14, 31],
       [11, 14, 31, 15],
       [31, 14, 10, 30],
       [31, 30, 10, 27],
       [30, 27, 26, 10],
       [26, 43, 27, 47],
       [26, 27, 30, 47],
       [27, 30, 47, 31],
       [47, 30, 26, 46],
       [47, 46, 26, 43],
       [46, 43, 42, 26],
       [42, 59, 43, 63],
       [42, 43, 46, 63],
       [43, 46, 63, 47],
       [63, 46, 42, 62],
       [63, 62, 42, 59],
       [62, 59, 58, 42]], dtype=int32), quads=array([], shape=(0, 4), dtype=int32), triangles=array([], shape=(0, 3), dtype=int32), hexahedra=array([[ 0,  1,  5,  4, 16, 17, 21, 20],
       [16, 17, 21, 20, 32, 33, 37, 36],
       [32, 33, 37, 36, 48, 49, 53, 52],
       [ 4,  5,  9,  8, 20, 21, 25, 24],
       [20, 21, 25, 24, 36, 37, 41, 40],
       [36, 37, 41, 40, 52, 53, 57, 56],
       [ 8,  9, 13, 12, 24, 25, 29, 28],
       [24, 25, 29, 28, 40, 41, 45, 44],
       [40, 41, 45, 44, 56, 57, 61, 60],
       [ 1,  2,  6,  5, 17, 18, 22, 21],
       [17, 18, 22, 21, 33, 34, 38, 37],
       [33, 34, 38, 37, 49, 50, 54, 53],
       [ 5,  6, 10,  9, 21, 22, 26, 25],
       [21, 22, 26, 25, 37, 38, 42, 41],
       [37, 38, 42, 41, 53, 54, 58, 57],
       [ 9, 10, 14, 13, 25, 26, 30, 29],
       [25, 26, 30, 29, 41, 42, 46, 45],
       [41, 42, 46, 45, 57, 58, 62, 61],
       [ 2,  3,  7,  6, 18, 19, 23, 22],
       [18, 19, 23, 22, 34, 35, 39, 38],
       [34, 35, 39, 38, 50, 51, 55, 54],
       [ 6,  7, 11, 10, 22, 23, 27, 26],
       [22, 23, 27, 26, 38, 39, 43, 42],
       [38, 39, 43, 42, 54, 55, 59, 58],
       [10, 11, 15, 14, 26, 27, 31, 30],
       [26, 27, 31, 30, 42, 43, 47, 46],
       [42, 43, 47, 46, 58, 59, 63, 62]], dtype=int32), min=array([0., 0., 0.]), max=array([0., 0., 0.]), resolution=array([3, 3, 3], dtype=int64), **kwargs):
    """Generate a Grid Tetrahedral or Hexahedral Mesh


    Args:

		 name: object name

		 printLog: if true, emits extra messages at runtime.

		 tags: list of the subsets the objet belongs to

		 bbox: this object bounding box

		 componentState: The state of the component among (Dirty, Valid, Undefined, Loading, Invalid).

		 listening: if true, handle the events, otherwise ignore the events

		 output_position: output array of 3d points

		 tetrahedra: output mesh tetrahedra

		 quads: output mesh quads

		 triangles: output mesh triangles

		 hexahedra: output mesh hexahedra

		 min: the 3 coordinates of the minimum corner

		 max: the 3 coordinates of the maximum corner

		 resolution: the number of cubes in the x,y,z directions. If resolution in the z direction is  0 then a 2D grid is generated


    """
    return attachedTo.createObject("GenerateGrid" , name=name, printLog=printLog, tags=tags, bbox=bbox, componentState=componentState, listening=listening, output_position=output_position, tetrahedra=tetrahedra, quads=quads, triangles=triangles, hexahedra=hexahedra, min=min, max=max, resolution=resolution, **kwargs)
